// ----
// How to use Profiles with -P arguments
// ----
//
// Run gradle bootRun tasks with the -P argument to utilize a profile.
//
// For example, within a subproject's directory:
// gradle -Pdev bootRun
//
// Or, if in the parent project's directory,
// individual projects can be targeted using their name:
// gradle -Pdev subproject:bootRun

def prodProfile='prod'
def devProfile='dev'
def testsProfile='tests'
def debProfile='deb'
def propertyDrivenProfile;

if (project.hasProperty("${prodProfile}")) {
  // Used for production environment
  propertyDrivenProfile = prodProfile
    apply from: rootProject.file("./gradle/${prodProfile}.gradle");

} else if (project.hasProperty('tests')) {

  // Used for test environment
  propertyDrivenProfile = testsProfile
    apply from: rootProject.file("./gradle/${testsProfile}.gradle");

} else if (project.hasProperty('dev')) {

  // Used for development environment
  propertyDrivenProfile = devProfile
    apply from: rootProject.file("./gradle/${devProfile}.gradle");
} else if (project.hasProperty('deb')) {

  // Used for development environment
  propertyDrivenProfile = devProfile
    apply from: rootProject.file("./gradle/${debProfile}.gradle");

} else {

  // Default when no profile property is specified, development
  propertyDrivenProfile = devProfile
    apply from: rootProject.file("./gradle/${devProfile}.gradle");

}
ext.set("propertyDrivenProfile", propertyDrivenProfile)
println 'Using profile: "' + propertyDrivenProfile + '" for ' + project.getName()

// Reading environment specific properties.
file("./src/main/resources/application-${propertyDrivenProfile}.properties").withReader {
  Properties props = new Properties()
    props.load(it)
    project.ext.appProps = props
}

// Extract application properties needed for build.
println "Exctracting application properties for ${propertyDrivenProfile} profile."

ext.set("spring.datasource.url", "${ext.appProps['spring.datasource.url']}")
ext.set("spring.datasource.username", "${ext.appProps['spring.datasource.username']}")
ext.set("spring.datasource.password", "${ext.appProps['spring.datasource.password']}")
ext.set("liquibase.change-log", "${ext.appProps['liquibase.change-log']}")

// bootRun will rely on the -P profile argument,
// defaulting to the "test" profile if no -P arguments are provided
bootRun {
  systemProperties = [
    'spring.profiles.active':   propertyDrivenProfile  ]

      // Use -Pproperty.name=value in addition to a -P profile argument
      // for each property below to pass database connection properties.
      //
      // These will only be used if profile specific property files do not override them.
      // They are intended for use with the "prod" profile.
      ext.applyPropertyIfExists = { propertyKey ->
        if(project.hasProperty(propertyKey)) {
          systemProperties[propertyKey] = project.getProperty(propertyKey)
        }
      }
    applyPropertyIfExists('spring.datasource.username')
    applyPropertyIfExists("spring.datasource.url")
    applyPropertyIfExists('spring.datasource.password')
    applyPropertyIfExists('jasypt.encryptor.password')
    println "System Properties :"
    println systemProperties

    // Alternative to using the extended bootRun task above to set properties.
    // Comment out the bootRun task extension above (lines 45 to 63) and un-comment this task (lines 72 to 78) to try it.
    //
    // Appends properties to each subproject's application.properties file during compilation,
    // which ensures WARs and JARs always run with the profiles they were built with.
    // Also works with the bootRun task without requiring it to be extended.
    // Defaults to the "test" profile if no -P arguments are provided.
    // classes << {
    //     println 'Adding spring.profiles.active=' + propertyDrivenProfiles + ' to application.properties'
    //     FileTree tree = fileTree(dir: "build/resources/main").include("application.properties")
    //     tree.each { File file ->
    //         file.append('\nspring.profiles.active=' + propertyDrivenProfiles);
    //     }
    // }
}
