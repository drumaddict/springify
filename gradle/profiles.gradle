// ----
// How to use Profiles with -P arguments
// ----
//
// Run gradle bootRun tasks with the -P argument to utilize a profile.
//
// For example, within a subproject's directory:
// gradle -Pdev bootRun
//
// Or, if in the parent project's directory,
// individual projects can be targeted using their name:
// gradle -Pdev subproject:bootRun

def prodProfile='prod'
def devProfile='dev'
def testsProfile='tests'
def debProfile='deb'
def travisProfile='travis'
def propertyDrivenProfile;

if (project.hasProperty("${prodProfile}")) {
  // Used for production environment
  propertyDrivenProfile = prodProfile
    apply from: rootProject.file("./gradle/${prodProfile}.gradle");

} else if (project.hasProperty("${testsProfile}")) {

  // Used for tests environment
  propertyDrivenProfile = testsProfile
    apply from: rootProject.file("./gradle/${testsProfile}.gradle");

} else if (project.hasProperty("${devProfile}")) {

  // Used for development environment
  propertyDrivenProfile = devProfile
    apply from: rootProject.file("./gradle/${devProfile}.gradle");
} else if (project.hasProperty("${debProfile}")) {

  // Used for debugging
  propertyDrivenProfile = debProfile
    apply from: rootProject.file("./gradle/${debProfile}.gradle");

} else if (project.hasProperty("${travisProfile}")) {

  // Used for travis
  propertyDrivenProfile = travisProfile
    apply from: rootProject.file("./gradle/${travisProfile}.gradle");



} else {

  // Default when no profile property is specified, development
  propertyDrivenProfile = prodProfile
    apply from: rootProject.file("./gradle/${prodProfile}.gradle");

}
ext.set("propertyDrivenProfile", propertyDrivenProfile)
println 'Using profile: "' + propertyDrivenProfile + '" for ' + project.getName()
println "Populating project.ext.appProps with application properties for ${propertyDrivenProfile} profile."
// Reading environment specific properties.
file("./src/main/resources/application-${propertyDrivenProfile}.properties").withReader {
  Properties props = new Properties()
    props.load(it)
    project.ext.appProps = props
}
println "project.ext.appProps :"
println project.ext.appProps

// bootRun will rely on the -P profile argument,
// defaulting to the "dev" profile if no -P arguments are provided
bootRun {
  systemProperties = [
    'spring.profiles.active':   propertyDrivenProfile  ]
      classes.doLast {
        println 'Adding spring.profiles.active=' + propertyDrivenProfile + ' to application.properties'
          FileTree tree = fileTree(dir: "build/resources/main").include("application.properties")
          tree.each { File file ->
            file.append('\nspring.profiles.active=' + propertyDrivenProfile);
          }
      }
}
